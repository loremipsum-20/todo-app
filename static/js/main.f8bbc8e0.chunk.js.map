{"version":3,"sources":["components/NewTodoInput/NewTodoInput.js","components/EditTodo/EditTodo.js","components/Todo/Todo.js","components/TodoList/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["NewTodoInput","addTodo","useState","inputValue","setInputValue","saveNewTodo","newTodo","id","Date","now","Math","random","toString","title","isDone","type","value","className","placeholder","onKeyDown","keyCode","onChange","target","onClick","EditTodo","handleIsEdit","editTodo","Todo","completedTodo","deleteTodo","isEdit","setIsEdit","newEditState","boolean","checked","TodoList","todos","map","todo","index","App","JSON","parse","localStorage","getItem","todosState","setTodos","handleSaveTodo","newTodos","setItem","stringify","todoId","filter","editedId","editedTitle","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qSA6CeA,MAzCf,YAAoC,IAAZC,EAAW,EAAXA,QAAW,EACGC,mBAAS,IADZ,mBAC1BC,EAD0B,KACdC,EADc,KAajC,SAASC,IACP,IAAMC,EAAU,CAChBC,IAAKC,KAAKC,MAAQC,KAAKC,UAAUC,WACjCC,MAAOV,EACPW,QAAQ,GAGRb,EAAQK,GACRF,EAAc,IAGhB,OACE,gCACE,uBACEW,KAAK,OACLC,MAAOb,EACPc,UAAU,YACVC,YAAY,uBACZC,UA5BN,YACkB,KADoB,EAAXC,SAEvBf,KA4BEgB,SAxBN,YAAqC,IAAVC,EAAS,EAATA,OACzBlB,EAAckB,EAAON,UA0BnB,wBAAQO,QAASlB,EAAjB,8B,MClBSmB,MApBf,YAA0D,IAAtCX,EAAqC,EAArCA,MAAON,EAA8B,EAA9BA,GAAIkB,EAA0B,EAA1BA,aAAcC,EAAY,EAAZA,SAAY,EACnBxB,mBAASW,GADU,mBAChDV,EADgD,KACpCC,EADoC,KAYvD,OACE,gCACE,uBAAOiB,SANX,YAAuC,IAAXC,EAAU,EAAVA,OAC1BlB,EAAckB,EAAON,QAKgBA,MAAOb,IAC1C,wBAAQoB,QAZZ,WACEE,GAAa,GACbC,EAASnB,EAAIJ,IAUX,2BC0BSwB,MAvCf,YAA4E,IAA3Dd,EAA0D,EAA1DA,MAAOC,EAAmD,EAAnDA,OAAQP,EAA2C,EAA3CA,GAAIqB,EAAuC,EAAvCA,cAAeC,EAAwB,EAAxBA,WAAYH,EAAY,EAAZA,SAAY,EAC7CxB,oBAAS,GADoC,mBAClE4B,EADkE,KAC1DC,EAD0D,KAGzE,SAASC,EAAaC,GACpBF,EAAUE,GAGZ,OACE,8BACGH,EACC,cAAC,EAAD,CACEjB,MAAOA,EACPY,aAAcO,EACdN,SAAUA,EACVnB,GAAIA,IAIV,qBAAIU,UAAWH,EAAS,WAAa,GAArC,UACA,gCACA,uBACAC,KAAK,WACLE,UAAU,WACViB,QAASpB,EACTO,SAAU,kBAAMO,EAAcrB,MAE7BM,KAED,gCACA,wBAAQU,QAAS,kBAAMS,GAAa,IAAOf,UAAU,SAArD,SAA8D,mBAAGA,UAAU,mBAC3E,wBAAQM,QAAS,kBAAMM,EAAWtB,IAAKU,UAAU,SAAjD,SAA0D,mBAAGA,UAAU,2B,MCV5DkB,MApBf,YAAmE,IAA/CC,EAA8C,EAA9CA,MAAOP,EAAuC,EAAvCA,WAAYD,EAA2B,EAA3BA,cAAeF,EAAY,EAAZA,SACpD,OACE,8BACE,6BACGU,EAAMC,KAAI,SAACC,EAAMC,GAAP,OACT,cAAC,EAAD,CAEAhC,GAAI+B,EAAK/B,GACTM,MAAOyB,EAAKzB,MACZC,OAAQwB,EAAKxB,OACbe,WAAYA,EACZD,cAAeA,EACfF,SAAUA,GANLa,WCoEA,SAASC,IAAO,IAAD,EACGtC,mBAASuC,KAAKC,MAAMC,aAAaC,QAAQ,WAAa,IADzD,mBACrBC,EADqB,KACTC,EADS,KAuB5B,SAASC,EAAeC,GACtBL,aAAaM,QAAQ,QAASR,KAAKS,UAAUF,IAC7CF,EAASE,GAeX,OACE,sBAAK/B,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACA,8CAIA,iCACE,cAAC,EAAD,CAAchB,QAxCpB,SAAuBK,GAErByC,EADc,sBAAOF,GAAP,CAAmBvC,QAyC7B,cAAC,EAAD,CACA8B,MAAOS,EACPhB,WAhDN,SAAsBsB,GAEpBJ,EADiBF,EAAWO,QAAO,qBAAG7C,KAAgB4C,OAgDlDvB,cAxCN,SAA4BuB,GAO5BJ,EANmBF,EAAWR,KAAI,SAACC,GAIjC,OAHMA,EAAK/B,KAAO4C,IACdb,EAAKxB,QAAUwB,EAAKxB,QAEjBwB,OAoCHZ,SAzBN,SAAoB2B,EAAUC,GAC1B,IAAMN,EAAWH,EAAWR,KAAI,SAACC,GAI/B,OAHIA,EAAK/B,KAAO8C,IACdf,EAAKzB,MAAQyC,GAERhB,KAGTQ,EAASE,MAmBP,wBAAQzB,QAAS,kBAAMwB,EAAe,KAAtC,0BAEF,iCACE,+CCzIR,IAYeQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f8bbc8e0.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./NewTodoInput.css\";\n\n\nfunction NewTodoInput({ addTodo }) {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  function handleOnKeyDown({ keyCode }) {\n    if (keyCode === 13) {\n      saveNewTodo();\n    }\n  }\n\n  function handleInputValue({target}) {\n    setInputValue(target.value)\n  }\n\n  function saveNewTodo() {\n    const newTodo = {\n    id: (Date.now() + Math.random()).toString(),\n    title: inputValue,\n    isDone: false\n    };\n\n    addTodo(newTodo);\n    setInputValue(\"\");\n  }\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={inputValue}\n        className=\"new-input\"\n        placeholder=\"write your task here\"\n        onKeyDown={handleOnKeyDown}\n        // call here handleInputValue func\n        onChange={handleInputValue}\n      />\n      {/* onClick call saveNewTodo */}\n      <button onClick={saveNewTodo}>Add New Todo</button>\n    </div>\n  );\n}\n\nexport default NewTodoInput;\n","import React, { useState } from \"react\";\n\nfunction EditTodo({ title, id, handleIsEdit, editTodo }) {\n  const [inputValue, setInputValue] = useState(title);\n\n  function handleSaveButton() {\n    handleIsEdit(false);\n    editTodo(id, inputValue);\n  }\n\n  function handleInputValue({ target }) {\n    setInputValue(target.value);\n  }\n\n  return (\n    <div>\n      <input onChange={handleInputValue} value={inputValue} />\n      <button onClick={handleSaveButton}>Save Edit</button>\n    </div>\n  );\n}\n\nexport default EditTodo;\n","import React, { useState } from \"react\";\nimport \"./Todo.css\";\nimport EditTodo from \"../EditTodo/EditTodo.js\";\n\nfunction Todo( { title, isDone, id, completedTodo, deleteTodo, editTodo }) {\n  const [isEdit, setIsEdit] = useState(false);\n\n  function newEditState(boolean) {\n    setIsEdit(boolean);\n  }\n\n  return (\n    <div>\n      {isEdit ? (\n        <EditTodo\n          title={title}\n          handleIsEdit={newEditState}\n          editTodo={editTodo}\n          id={id}\n        />\n      ) : (\n\n    <li className={isDone ? \"itemDone\" : \"\"}>\n    <div>\n    <input\n    type=\"checkbox\"\n    className=\"checkbox\"\n    checked={isDone}\n    onChange={() => completedTodo(id)}\n     />\n    {title}\n    </div>\n    <div>\n    <button onClick={() => newEditState(true)} className=\"delete\"><i className=\"fa fa-pencil\"></i></button>\n    <button onClick={() => deleteTodo(id)} className=\"delete\"><i className=\"fa fa-trash\"></i></button>\n    </div>\n    </li>\n  )\n}\n</div>\n);\n}\n\nexport default Todo;\n","import React from \"react\";\nimport Todo from \"../Todo/Todo.js\";\nimport \"./TodoList.css\";\n\nfunction TodoList({ todos, deleteTodo, completedTodo, editTodo }) {\n  return (\n    <div>\n      <ul>\n        {todos.map((todo, index) => (\n          <Todo\n          key={index}\n          id={todo.id}\n          title={todo.title}\n          isDone={todo.isDone}\n          deleteTodo={deleteTodo}\n          completedTodo={completedTodo}\n          editTodo={editTodo}\n          />\n          ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default TodoList;\n","/*\n1_ divide our UI in components: Think in React Way\n  _ document layout => App.js\n  _ input + add btn => NewTask\n  _ list of todos => TaskList\n  _ todo (delete btn) => Task\n  _ extra: edit screen => EditTask\n\n2_ Create NewTask UI\n    - add it to App.js\n\n3_ Work on App.js UI\n4_ create TaskList UI\n5_ create Task UI\n6_ create Edit Task UI\n*/\n\n/*\n1_ create Appjs and write general document html\n2_ cretae child component and export it\n3_ import child component in App.js\n4_ Add child component to our App.js html <NewTodoInput />\n5_ In our Child component, we write the html that we need\n6_ we pass down information as props from our Appjs to our Child component\n // props are like custom html attributes\n7_ we grab props in our child component\n   // check the 3 different way how to gran props in your components\n8_ we use thse props in child component html\n*/\n// How to add props\n// 1_ take props with the whole prop obj\n// function NewTodoInput(props}) {\n// console.log(props) // is an obj of properties\n// { labelBtn: 'Add New Todo BTN', placeholder: 'write your name here'}\n\n// 2_ decostruct props properties in the functions brakets\n// i.e. function NewTodoInput({ label, placeholder }) {\n\n// 3_ decostructive props properties in a variable\n//const { labelBtn, placeholder } = props;\n/*\n7_ Save and retrieve items from local storage\n    -> save items when: add new todo, delete todo, edit todo, isDone todo\n    -> retrieve items on Appjs and add them as default state\n\n\n    function save() {\n      localStorage.setItem(\"todos\", JSON.stringify(todos));\n    }\n\n    let todos = JSON.parse(localStorage.getItem(\"todos\")) || [];\n */\n\nimport React, { useState } from \"react\";\n//import logo from './logo.svg' ;\nimport './App.css';\nimport NewTodoInput from \"./components/NewTodoInput/NewTodoInput.js\";\nimport TodoList from \"./components/TodoList/TodoList.js\";\n\n/*const todosData = [\n  {\n    id: \"134713749319748913\",\n    title: \"Do grocery\",\n    isDone: false\n  },\n  {\n    id: \"34954629579425425\",\n    title: \"Enjoy your eastern with family\",\n    isDone: false\n  },\n  {\n    id: \"724095784927859\",\n    title: \"Learn about props\",\n    isDone: false\n  }\n];*/\n\n\nexport default function App() {\n  const [todosState, setTodos] = useState(JSON.parse(localStorage.getItem(\"todos\")) || []);\n  //useState Inhalt in den Klammern bearbeiten mit localStorage\n\n  function handleDelete(todoId) {\n    const newTodos = todosState.filter(({ id }) => id !== todoId);\n    handleSaveTodo(newTodos);\n  }\n  function handleNewTodo(newTodo) {\n    const newTodos = [...todosState, newTodo];\n    handleSaveTodo(newTodos);\n  }\n\n  function handleCompleteTodo(todoId) {\n    const newTodos = todosState.map((todo) => {\n      if (todo.id === todoId) {\n        todo.isDone = !todo.isDone;\n  }\n    return todo;\n  });\n  handleSaveTodo(newTodos);\n  }\n\n  function handleSaveTodo(newTodos) {\n    localStorage.setItem(\"todos\", JSON.stringify(newTodos));\n    setTodos(newTodos);\n    //setTodo = save the new state\n  }\n\n  function handleEdit(editedId, editedTitle) {\n      const newTodos = todosState.map((todo) => {\n        if (todo.id === editedId) {\n          todo.title = editedTitle;\n        }\n        return todo;\n      });\n\n      setTodos(newTodos);\n    }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <h1>\n        To Do List\n      </h1>\n      </header>\n      <main>\n        <NewTodoInput addTodo={handleNewTodo}\n         />\n        <TodoList\n        todos={todosState}\n        deleteTodo={handleDelete}\n        completedTodo={handleCompleteTodo}\n        editTodo={handleEdit}\n         />\n        <button onClick={() => handleSaveTodo([])}>Clear all</button>\n      </main>\n      <footer>\n        <p>© 2021</p>\n      </footer>\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}